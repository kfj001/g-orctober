[gd_resource type="VisualShader" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=1]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 32.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeColorOp" id=5]
operator = 6

[sub_resource type="VisualShaderNodeColorUniform" id=6]
output_port_for_preview = 0
uniform_name = "pallette_swap_color"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "time"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=9]
source = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "hurt_effect_blend"

[sub_resource type="VisualShaderNodeColorConstant" id=12]

[resource]
code = "shader_type canvas_item;
uniform vec4 pallette_swap_color : hint_color;
uniform float time;
uniform float hurt_effect_blend;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:17
	vec3 n_out17p0 = pallette_swap_color.rgb;
	float n_out17p1 = pallette_swap_color.a;

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// ColorOp:16
	vec3 n_out16p0 = vec3(1.0) - (vec3(1.0) - n_out17p0) / (n_out3p0);

// Color:9
	vec3 n_out9p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out9p1 = 1.000000;

// ScalarUniform:18
	float n_out18p0 = time;

// ScalarOp:14
	float n_in14p1 = 32.00000;
	float n_out14p0 = n_out18p0 * n_in14p1;

// ScalarFunc:11
	float n_out11p0 = sin(n_out14p0);

// ScalarFunc:13
	float n_out13p0 = abs(n_out11p0);

// VectorMix:6
	vec3 n_out6p0 = mix(n_out16p0, n_out9p0, vec3(n_out13p0));

// ScalarUniform:8
	float n_out8p0 = hurt_effect_blend;

// VectorMix:15
	vec3 n_out15p0 = mix(n_out16p0, n_out6p0, vec3(n_out8p0));

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -374.45, 581.71 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1040, 380 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -80, 60 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 140, 40 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 540, 400 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( 700, -100 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 380, 560 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 200, 660 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 440, 700 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 20, 740 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 840, 400 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 520, 20 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( 360, -180 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -180, 660 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 9, 0, 6, 1, 3, 1, 0, 1, 11, 0, 13, 0, 13, 0, 6, 2, 14, 0, 11, 0, 6, 0, 15, 1, 15, 0, 0, 0, 8, 0, 15, 2, 3, 0, 16, 1, 17, 0, 16, 0, 16, 0, 6, 0, 16, 0, 15, 0, 18, 0, 14, 0 )
